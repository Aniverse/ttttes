#!/bin/bash
#
# 作者：弱鸡
# 四处抄来的，部分参考资料在下边
# 写得很烂，请大佬帮忙修正（修正后请告知本人，以提高本渣的知识水平）（包括英语表达有误的地方也请指出）
#
# https://github.com/qbittorrent/qBittorrent/wiki
# https://github.com/arakasi72/rtinst
# https://github.com/QuickBox/QB
# https://flexget.com
# https://rclone.org/install
# http://dev.deluge-torrent.org/wiki/UserGuide
# https://mkvtoolnix.download/downloads.html
# http://wilywx.com【h5ai】
# https://www.dwhd.org【Seedbox 军团脚本】
# https://teddysun.com/489.html【BBR的安装与检测】
# https://www.oldking.net/350.html【System Information】
# Google, Baidu, etc.
#
# Special thanks to xxxxXC, Txxxx1 and his friends for their guides.
#
#
# 无脑root跑，无脑777权限
# --------------------------------------------------------------------------------
### Script Console Colors ###
black=$(tput setaf 0); red=$(tput setaf 1); green=$(tput setaf 2); yellow=$(tput setaf 3);
blue=$(tput setaf 4); magenta=$(tput setaf 5); cyan=$(tput setaf 6); white=$(tput setaf 7);
on_red=$(tput setab 1); on_green=$(tput setab 2); on_yellow=$(tput setab 3); on_blue=$(tput setab 4);
on_magenta=$(tput setab 5); on_cyan=$(tput setab 6); on_white=$(tput setab 7); bold=$(tput bold);
dim=$(tput dim); underline=$(tput smul); reset_underline=$(tput rmul); standout=$(tput smso);
reset_standout=$(tput rmso); normal=$(tput sgr0); alert=${white}${on_red}; title=${standout};
sub_title=${bold}${yellow}; repo_title=${white}${on_blue}; message_title=${white}${on_green};
zidingyi1=${white}${on_cyan}; zidingyi2=${white}${on_red}; zidingyi3=${white}${on_magenta}
# --------------------------------------------------------------------------------
function _string() { perl -le 'print map {(a..z,A..Z,0..9)[rand 62] } 0..pop' 15 ; }
# --------------------------------------------------------------------------------
###   Downloads\ScanDirsV2=@Variant(\0\0\0\x1c\0\0\0\0)
###   ("yakkety"|"xenial"|"wily"|"jessie"|"stretch"|"zesty"|"artful")
# --------------------------------------------------------------------------------
# master/Config
# vncserver -geometry 1920x1080
# vncserver -kill :1
# vncserver




clear




# —————— 系统检查 —————— 
function _intro() {
  apt-get -yqq install lsb-release virt-what > /dev/null 2>&1
  virtua=$(virt-what) 2>/dev/null
  DISTRO=$(lsb_release -is)
  RELEASE=$(lsb_release -rs)
  CODENAME=$(lsb_release -cs)
  SETNAME=$(lsb_release -rc)
  arch=$( uname -m )
  lbit=$( getconf LONG_BIT )
  kern=$( uname -r )
  relno=$(lsb_release -sr | cut -d. -f1)
###  echo "[${repo_title}A young and simple script${normal}] ${title} Seedbox Installation ${normal}  "
###  echo
###  echo "${title}                         Warning!                        ${normal} "
###  echo "${message_title}  This script is a BETA and have many unresolved issues  ${normal} "
###  echo "${message_title}          May work with Ubuntu 16.04 | Debian 8          ${normal} "
###  echo "${message_title}                                                         ${normal} "
###  echo "${message_title}          Press Ctrl+C to stop this shit script          ${normal} "
  echo "---------- System Information ----------"
  echo " OS      : ${cyan}$DISTRO $RELEASE $CODENAME${normal}"
  echo " Arch    : ${cyan}$arch ($lbit Bit)${normal}"
  echo " Kernel  : ${cyan}$kern${normal}"
  echo -ne " Virt    : "
  if [[ ${virtua} ]]; then
    echo -e "${cyan}$virtua${normal}"
  else
    echo -e "${cyan}No Virt${normal}"
  fi
  echo "----------------------------------------"
  echo
  echo "${green}Checking distribution ...${normal}"
  if [ ! -x  /usr/bin/lsb_release ]; then
    echo "Too young! It looks like you are running $DISTRO, which is not supported by this script"
    echo "Exiting..."
    exit 1
  fi
  echo
  if [[ ! "$DISTRO" =~ ("Ubuntu"|"Debian") ]]; then
    echo "$DISTRO: ${alert}Too simple! It looks like you are running $DISTRO, which is not supported by this script${normal} "
    echo 'Exiting...'
    exit 1
  elif [[ ! "$CODENAME" =~ ("xenial"|"jessie"|"stretch") ]]; then
    echo "Too young too simple! You do not appear to be running a supported $DISTRO release"
    echo "${bold}$SETNAME${normal}"
    echo 'Exiting...'
    exit 1
  fi
}




# —————— 检查是否以root运行 —————— 
function _checkroot() {
  if [[ $EUID != 0 ]]; then
    echo '{title}${bold}Navie! I think this young man will not be able to run this script without root privileges.${normal}'
    echo ' Exiting...'
    exit 1
  fi
  echo "${green}${bold}Excited! You're running as root. Let's make some big news ... ${normal}"
  echo
}




# —————— 询问是否继续 Type-A —————— 
function _warning() {
  echo
  echo -e "脚本作者是个菜鸡，Linux 水平为0，本脚本完全是依样画葫芦做出来的"
  echo -e "存在一定的翻车几率；如果翻车了请不要找我，我什么都不知道"
  echo -e "这个脚本大概能试着做三件事"
  echo
  echo -e "${blue} 1. 安装指定版本的 qBittorrent、Deluge、rTorrent、Transmission"
  echo -e " 2. 安装 Flexget、rclone"
  echo -e " 3. 修改一些系统设置${normal}"
  echo
  echo -e "${bold}更具体的使用说明请查看说明文档"
  echo -e "如果你做好了翻车的准备仍决定上车，请敲 ${message_title}ENTER${normal} ${bold}继续"
  echo -e "如果你想下车，请按 ${on_red}Ctrl+C${normal}";read input
  echo;echo;echo
}




# —————— 录入账号密码 —————— 
function _askpass() {
  clear
  genpass=$(perl -le 'print map {(a..z,A..Z,0..9)[rand 62] } 0..pop' 15 ;)
  theshell="/bin/bash";
  echo "${bold}${yellow}Add a Master Account user to sudoers${normal}";
  echo -n "Username: "; read user
  ANUSER=$(echo "$user"|sed 's/.*/\L&/')
  echo -n "Password: (hit enter to generate a password) "; read 'password'
  if [[ ! -z "${password}" ]]; then
    echo "setting password to ${cyan}${bold}${password}${normal}"
    ANPASS=${password}
  else
    echo "setting password to ${cyan}${bold}${genpass}${normal}"
    ANPASS=${genpass}
  fi
  echo
}




# —————— 询问需要安装的 qBittorrent 的版本 —————— 
function _askqbt() {
  echo -e "01) qBittorrent ${cyan}3.3.7${normal}"
  echo -e "02) qBittorrent ${cyan}3.3.8${normal}"
  echo -e "03) qBittorrent ${cyan}3.3.9${normal}"
  echo -e "04) qBittorrent ${cyan}3.3.10${normal}"
  echo -e "05) qBittorrent ${cyan}3.3.11${normal} (default)"
  echo -e "06) qBittorrent ${cyan}3.3.12${normal}"
  echo -e "07) qBittorrent ${cyan}3.3.13${normal}"
  echo -e "08) qBittorrent ${cyan}3.3.14${normal}"
  echo -e "09) qBittorrent ${cyan}3.3.15${normal}"
  echo -e "10) qBittorrent ${cyan}3.3.16${normal}"
  ### echo -e "11) qBittorrent ${cyan}4.0.1${normal}"
  echo -e "12) Do not install qBittorrent"
  echo -ne "${bold}${yellow}What version of qBittorrent do you want?${normal} (Default ${cyan}05${normal}): "; read version
  case $version in
    01) QBVERSION=3.3.7 ;;
    02) QBVERSION=3.3.8 ;;
    03) QBVERSION=3.3.9 ;;
    04) QBVERSION=3.3.10 ;;
    05 | "") QBVERSION=3.3.11 ;;
    06) QBVERSION=3.3.12 ;;
    07) QBVERSION=3.3.13 ;;
    08) QBVERSION=3.3.14 ;;
    09) QBVERSION=3.3.15 ;;
    10) QBVERSION=3.3.16 ;;
    11) QBVERSION=4.0.1 ;;
    12) QBVERSION=No ;;
    1) QBVERSION=3.3.7 ;;
    2) QBVERSION=3.3.8 ;;
    3) QBVERSION=3.3.9 ;;
    4) QBVERSION=3.3.10 ;;
    5) QBVERSION=3.3.11 ;;
    6) QBVERSION=3.3.12 ;;
    7) QBVERSION=3.3.13 ;;
    8) QBVERSION=3.3.14 ;;
    9) QBVERSION=3.3.15 ;;
    *) QBVERSION=3.3.11 ;;
  esac
  if [ $QBVERSION == "No" ]; then
    echo "${zidingyi3}qBittorrent will ${zidingyi2}not${zidingyi3} be installed${normal}"
    echo
  elif [ $QBVERSION == "4.0.1" ]; then
    echo "${zidingyi1}qBittorrent $QBVERSION${normal} will be installed with libtorrent-rasterbar 1.1.5"
    QBVERSION4=Yes
    echo
  else 
    echo "${zidingyi1}qBittorrent $QBVERSION${normal} will be installed with libtorrent-rasterbar 1.0.11"
    echo
  mkdir -p /home/${ANUSER}/qbittorrent/download
  mkdir -p /home/${ANUSER}/qbittorrent/watch
  fi
}




# —————— 询问需要安装的 Deluge 版本 —————— 
function _askdeluge() {
  echo -e "01) Deluge ${cyan}1.3.11${normal}"
  echo -e "02) Deluge ${cyan}1.3.12${normal}"
  echo -e "03) Deluge ${cyan}1.3.13${normal}"
  echo -e "04) Deluge ${cyan}1.3.14${normal}"
  echo -e "05) Deluge ${cyan}1.3.15${normal} (default)"
  echo -e "06) Do not install Deluge"
  echo -ne "${bold}${yellow}What version of Deluge do you want?${normal} (Default ${cyan}05${normal}): "; read version
  case $version in
    01) DEVERSION=1.3.11 ;;
    02) DEVERSION=1.3.12 ;;
    03) DEVERSION=1.3.13 ;;
    04) DEVERSION=1.3.14 ;;
    05 | "") DEVERSION=1.3.15 ;;
    06) DEVERSION=No ;;
    1) DEVERSION=1.3.11 ;;
    2) DEVERSION=1.3.12 ;;
    3) DEVERSION=1.3.13 ;;
    4) DEVERSION=1.3.14 ;;
    5) DEVERSION=1.3.15 ;;
    6) DEVERSION=No ;;
    *) DEVERSION=1.3.15 ;;
  esac
  if [ $DEVERSION == "No" ]; then
    echo "${zidingyi3}Deluge will ${zidingyi2}not${zidingyi3} be installed${normal}"
  else 
    echo "${zidingyi1}Deluge $DEVERSION${normal} will be installed"
  fi
}




# —————— 询问需要安装的 Deluge libtorrent 版本 —————— 
function _askdelt() {
  if [ $DEVERSION == "No" ]; then
    echo  
  else
    echo  
    echo -e "01) libtorrent ${cyan}RC_0_16${normal}"
    echo -e "02) libtorrent ${cyan}RC_1_0${normal}"
    echo -e "03) libtorrent ${cyan}RC_1_1${normal} (not recommended)"
    echo -e "04) libtorrent ${cyan}repo  ${normal} (default)"
    echo -ne "${bold}${yellow}What version of libtorrent-rasterbar do you want to be used for Deluge?${normal} (Default ${cyan}04${normal}): "; read version
    case $version in
      1) DELTVERSION=RC_0_16 ;;
      2) DELTVERSION=RC_1_0 ;;
      3) DELTVERSION=RC_1_1 ;;
      4 | "") DELTVERSION=No ;;
      01) DELTVERSION=RC_0_16 ;;
      02) DELTVERSION=RC_1_0 ;;
      03) DELTVERSION=RC_1_1 ;;
      04) DELTVERSION=No ;;
      *) DELTVERSION=RC_1_0 ;;
    esac
    if [ $DELTVERSION == "No" ]; then
      echo "libtorrent will be installed from repo"
      if [ ! "$CODENAME" = "stretch" ]; then
        echo "Debian 9 will use ${zidingyi1}libtorrent 1.1.1${normal}"
      elif [ ! "$CODENAME" = "jessie" ]; then
        echo "Debian 8 will use ${zidingyi1}libtorrent 0.16.18${normal}"
      elif [ ! "$CODENAME" = "xenial" ]; then
        echo "Ubuntu 16.04 will use ${zidingyi1}libtorrent 1.0.11${normal}"
      fi
    else 
      echo "${zidingyi1}libtorrent $DELTVERSION${normal} will be installed"
    fi
    mkdir -p /home/${ANUSER}/deluge/download
    mkdir -p /home/${ANUSER}/deluge/watch
    echo
  fi
}




# —————— 询问需要安装的 rTorrent 版本 —————— 
function _askrt() {
  echo -e "01) rTorrent ${cyan}0.9.3${normal}"
  echo -e "02) rTorrent ${cyan}0.9.4${normal} (default)"
  echo -e "03) rTorrent ${cyan}0.9.4${normal} (with unoffical ipv6 support)"
  echo -e "04) rTorrent ${cyan}0.9.6${normal} (with  offical  ipv6 support)"
  echo -e "05) Do not install rTorrent"
  echo -ne "${bold}${yellow}What version of rTorrent do you want?${normal} (Default ${cyan}02${normal}): "; read version
  case $version in
    01) RTVERSION=0.9.3 ;;
    02 | "") RTVERSION=0.9.4 ;;
    03) RTVERSION=0.9.4.ipv6.supported ;;
    04) RTVERSION=0.9.6 ;;
    05) RTVERSION=No ;;
    1) RTVERSION=0.9.3 ;;
    2) RTVERSION=0.9.4 ;;
    3) RTVERSION=0.9.4.ipv6.supported ;;
    4) RTVERSION=0.9.6 ;;
    5) RTVERSION=No ;;
    *) RTVERSION=0.9.4 ;;
  esac
  if [ $CODENAME == "stretch" ]; then
    RTVERSION=0.9.6
    echo "Debian 9 is only supported by rtorrent 0.9.6"
    echo "${zidingyi1}rTorrent 0.9.6 (feature-bind branch)${normal} and ${zidingyi1}h5ai${normal} will be installed"
    echo
  else
    if [ $RTVERSION == "No" ]; then
      echo "${zidingyi3}rTorrent will ${zidingyi2}not${zidingyi3} be installed${normal}"
      echo
    elif [ $RTVERSION == "0.9.4.ipv6.supported" ]; then
      echo "${zidingyi1}rTorrent 0.9.4 (with unoffical ipv6 support)${normal} will be installed"
      echo
    elif [ $RTVERSION == "0.9.6" ]; then
      echo "${zidingyi1}rTorrent 0.9.6 (feature-bind branch)${normal} will be installed"
      echo
    else 
      echo "${zidingyi1}rTorrent $RTVERSION${normal} will be installed"
      echo
    fi
  fi
}




# —————— 询问需要安装的 Transmission 版本 —————— 
function _asktr() {
  echo -e "01) Transmission ${cyan}2.77${normal}"
  echo -e "02) Transmission ${cyan}2.82${normal}"
  echo -e "03) Transmission ${cyan}2.84${normal}"
  echo -e "04) Transmission ${cyan}2.92${normal} (default)"
  echo -e "05) Do not install Transmission"
  echo -ne "${bold}${yellow}What version of Transmission do you want?${normal} (Default ${cyan}04${normal}): "; read version
  case $version in
    01) TRVERSION=2.77 ;;
    02) TRVERSION=2.82 ;;
    03) TRVERSION=2.84 ;;
    04 | "") TRVERSION=2.92 ;;
    05) TRVERSION=No ;;
    1) TRVERSION=2.77 ;;
    2) TRVERSION=2.82 ;;
    3) TRVERSION=2.84 ;;
    4) TRVERSION=2.92 ;;
    5) TRVERSION=No ;;
    *) TRVERSION=2.92 ;;
  esac
  if [ $TRVERSION == "No" ]; then
    echo "${zidingyi3}Transmission will ${zidingyi2}not${zidingyi3} be installed${normal}"
    echo  
  else 
    echo "${zidingyi1}Transmission $TRVERSION${normal} will be installed"
    echo  
  fi
}




# —————— 询问是否需要安装 Flexget —————— 
function _askflex() {
  echo -ne "${bold}${yellow}Would you like to install Flexget?${normal} [Y]es or [${cyan}N${normal}]o: "; read responce
  case $responce in
    [yY] | [yY][Ee][Ss]) flexget=Yes ;;
    [nN] | [nN][Oo] | "" ) flexget=No ;;
    *) flexget=No ;;
  esac
  if [ $flexget == "Yes" ]; then
    echo "${zidingyi1}Flexget${normal} will be installed"
  else 
    echo "${zidingyi3}Flexget will ${zidingyi2}not${zidingyi3} be installed${normal}"
  fi
  echo
}




# —————— 询问是否需要安装 rclone —————— 
function _askrclone() {
  echo -ne "${bold}${yellow}Would you like to install rclone?${normal} [Y]es or [${cyan}N${normal}]o: "; read responce
  case $responce in
    [yY] | [yY][Ee][Ss]) rclone=Yes ;;
    [nN] | [nN][Oo] | "" ) rclone=No ;;
    *) rclone=No ;;
  esac
  if [ $rclone == "Yes" ]; then
    echo "${zidingyi1}rclone${normal} will be installed"
  else 
    echo "${zidingyi3}rclone will ${zidingyi2}not${zidingyi3} be installed${normal}"
  fi
  echo
}




# —————— 询问是否需要修改一些设置 —————— 
function _asktweaks() {
  echo -ne "${bold}${yellow}Would you like to configure some system settings? ${normal} [Y]es or [${cyan}N${normal}]o: "; read responce
  case $responce in
    [yY] | [yY][Ee][Ss]) tweaks=Yes ;;
    [nN] | [nN][Oo] | "" ) tweaks=No ;;
    *) tweaks=No ;;
  esac
  if [ $tweaks == "Yes" ]; then
    echo "${zidingyi1}System tweaks${normal} will be configured"
  else 
    echo "${zidingyi3}System tweaks will ${zidingyi2}not${zidingyi3} be installed${normal}"
  fi
  echo
}







# —————— 询问是否需要安装BBR —————— 
function _askbbr() {
  check_bbr_status
  if [ $? -eq 0 ]; then
    echo
    echo -e "${bold}${yellow}TCP BBR has been installed${normal}"
    bbr=Already Installed
  else
    check_kernel_version
    if [ $? -eq 0 ]; then
      echo
      echo -e "${bold}${yellow}Your kernel version is greater than 4.9, but BBR is not enabled${normal}"
      echo -e "${bold}${yellow}Would you like to use BBR as default congestion control algorithm? ${normal} [${cyan}Y${normal}]es or [N]o: "; read responce
      case $responce in
        [yY] | [yY][Ee][Ss] | "" ) bbr=Yes ;;
        [nN] | [nN][Oo]) bbr=No ;;
        *) bbr=Yes ;;
      esac
    else
      echo -e "Your kernel version is below 4.9, if you want to use BBR as default congestion control algorithm,"
      echo -e "the script will install the latest kernel to enable BBR"
      echo -e "${red}WARNING${normal} Installing new kernel may cause reboot failure in some cases"
      echo -ne "${bold}${yellow}Would you like to install latest kernel and enable BBR?
      case $responce in
        [yY] | [yY][Ee][Ss]) bbr=Yes ;;
        [nN] | [nN][Oo] | "" ) bbr=No ;;
        *) bbr=No ;;
      esac
    fi
  fi
  if [ $bbr == "Yes" ]; then
    echo "${zidingyi1}BBR${normal} will be installed"
  else 
    echo "${zidingyi3}BBR will ${zidingyi2}not${zidingyi3} be installed${normal}"
  fi
  echo
}

# 检查是否已经启用BBR
function check_bbr_status() {
    local param=$(sysctl net.ipv4.tcp_available_congestion_control | awk '{print $3}')
    if [[ "${param}" == "bbr" ]]; then
        return 0
    else
        return 1
    fi
}

# 检查系统内核版本是否大于4.9
function check_kernel_version() {
    local kernel_version=$(uname -r | cut -d- -f1)
    if version_ge ${kernel_version} 4.9; then
        return 0
    else
        return 1
    fi
}





# —————— 询问编译安装时需要使用的线程数量 —————— 
# 05 这个选项目前还没用，以后也不一定会加上这个功能（实用度似乎不高）
# （提醒自己）如果启用的话rt部分注意修改MAXCPUS的值，否则会出错

function _askmt() {
  echo -e "01 Use all avaliable threads default"
  echo -e "02 Use half of avaliable threads"
  echo -e "03 Use only one thread"
  echo -e "04 Use two thread"
###  echo -e "05 Do not compile, install softwares from repo"
  echo -e "Note that using more than one thread to compile may cause failure iN some cases"
  echo -ne "${bold}${yellow}How many threads do you want to use when compiling?${normal} Default ${cyan}01${normal}: "; read version
  case $version in
    01 | "") MAXCPUS=$(nproc) ;;
    02) MAXCPUS=$(echo "$(nproc) / 2"|bc) ;;
    03) MAXCPUS=1 ;;
    04) MAXCPUS=2 ;;
    05) MAXCPUS=No ;;
    1) MAXCPUS=$(nproc) ;;
    2) MAXCPUS=$(echo "$(nproc) / 2"|bc) ;;
    3) MAXCPUS=1 ;;
    4) MAXCPUS=2 ;;
    5) MAXCPUS=No ;;
    *) MAXCPUS=$(nproc) ;;
  esac
  if [ $MAXCPUS == "No" ]; then
    echo "${zidingyi1}Deluge/qBittorrent/Transmission will be installed from repo${normal}"
  elif [ $MAXCPUS == "1" ]; then
    echo "Only ${zidingyi1}ONE${normal} thread will be used when compiling"
  else
    echo "${zidingyi1}{MAXCPUS}${normal} threads will be used when compiling"
  fi
  echo
}




# —————— 询问是否安装发种工具箱 —————— 
function _asktools() {
  echo -e "wine, mono, BDinfo, eac3to, MKVToolnix, VNC, mktorrent, ffmpeg, mediainfo ..."
  echo -ne "${bold}${yellow}Would you like to install the above additional softwares related to uploading torrents? ${normal} [Y]es or [${cyan}N${normal}]o: "; read responce
  case $responce in
    [yY] | [yY][Ee][Ss]) tools=Yes ;;
    [nN] | [nN][Oo] | "" ) tools=No ;;
    *) tools=No ;;
  esac
  if [ $tools == "Yes" ]; then
    echo "${zidingyi1}Uploading Toolbox${normal} will be installed"
  else 
    echo "${zidingyi1}Uploading Toolbox will ${repo_title}not${zidingyi1} be configured${normal}"
  fi
  echo
}




# —————— 询问是否继续 Type-B —————— 
function _askcontinue() {
  clear
  echo -e "${bold}Please check the following information${normal}"
  echo
  echo '####################################################################'
  echo
  echo -e "                  ${cyan}${bold}Username${normal}      ${bold}${yellow}${ANUSER}${normal}"
  echo -e "                  ${cyan}${bold}Password${normal}      ${bold}${yellow}${ANPASS}${normal}"
  echo
  echo -e "                  ${cyan}${bold}qBittorrent${normal}   ${bold}${yellow}${QBVERSION}${normal}"
  echo -e "                  ${cyan}${bold}Deluge${normal}        ${bold}${yellow}${DEVERSION}${normal}"
  echo -e "                  ${cyan}${bold}rTorrent${normal}      ${bold}${yellow}${RTVERSION}${normal}"
  echo -e "                  ${cyan}${bold}Transmission${normal}  ${bold}${yellow}${TRVERSION}${normal}"
  echo -e "                  ${cyan}${bold}Flexget${normal}       ${bold}${yellow}${flexget}${normal}"
  echo -e "                  ${cyan}${bold}rclone${normal}        ${bold}${yellow}${rclone}${normal}"
  echo -e "                  ${cyan}${bold}BBR${normal}           ${bold}${yellow}${bbr}${normal}"
  echo -e "                  ${cyan}${bold}System tweak${normal}  ${bold}${yellow}${tweaks}${normal}"
  echo -e "                  ${cyan}${bold}Threads${normal}       ${bold}${yellow}${MAXCPUS}${normal}"
  echo
  echo '####################################################################'
  echo
  echo "${bold}如果有错需要重新输入或者不想继续装了，请按 ${on_red}Ctrl+C${normal} ${bold}下车；如果你觉得没问题了，请敲 ${on_green}ENTER${normal} ${bold}等待发车${normal}" ;read input
}




# —————— 创建用户 —————— 
function _setuser() {
  useradd "${ANUSER}" -m -G www-data -s "${theshell}"
  echo "${ANUSER}:${ANPASS}" | chpasswd >> /dev/null 2>&1
  printf "${ANUSER}:${ANPASS}" > /root/"$ANUSER".password
}




# —————— 编译安装 qBittorrent —————— 
function _installqbt() {
  if [ $QBVERSION == "No" ]; then
    cd
  elif [ $QBVERSION == "repo" ]; then
    apt-get install -y qbittorrent-nox
  else
    apt-get install -y libboost-dev libboost-system-dev build-essential qtbase5-dev qttools5-dev-tools python geoip-database libboost-system-dev libboost-chrono-dev libboost-random-dev libssl-dev libgeoip-dev pkg-config zlib1g-dev automake autoconf libtool git psmisc
    cd
    if [ $QBVERSION4 == "Yes" ]; then
      git clone -b RC_1_1 --single-branch https://github.com/arvidn/libtorrent.git
    else
      git clone -b RC_1_0 --single-branch https://github.com/arvidn/libtorrent.git 
    fi
    cd libtorrent
    ./autotool.sh 
    ./configure --disable-debug --enable-encryption --prefix=/usr --with-libgeoip=system 
    make clean
    make -j${MAXCPUS}
    make install
    cd
    git clone -b release-${QBVERSION} --single-branch https://github.com/qbittorrent/qBittorrent.git
    cd qBittorrent
    ./configure --prefix=/usr --disable-gui
    make -j${MAXCPUS}
    make install 
    cd
    rm -rf libtorrent qBittorrent
    echo;echo;echo;echo;echo;echo "  QBITTORRENT-INSTALLATION-COMPLETED  ";echo;echo;echo;echo;echo
  fi
}




# —————— 设置 qBittorrent —————— 
function _setqbt() {
  if [ $QBVERSION == "No" ]; then
    cd
  else

  mkdir -p /etc/inexistence/001.Log
  mkdir -p /home/${ANUSER}/qbittorrent/download
  mkdir -p /home/${ANUSER}/qbittorrent/torrent
  mkdir -p /home/${ANUSER}/qbittorrent/watch
  mkdir -p /var/www
  ln -s /home/${ANUSER}/qbittorrent/download /var/www/qbittorrent.download
  chown -R ${ANUSER}:${ANUSER} /home/${ANUSER}/qbittorrent
  chmod -R 777 /home/${ANUSER}/qbittorrent

################################ qBittorrent 启动脚本 ################################
  cat >/etc/systemd/system/qbittorrent.service<<EOF
[Unit]
Description=qBittorrent Daemon Service
After=network.target
[Service]
User=root
LimitNOFILE=100000
ExecStart=/usr/bin/qbittorrent-nox --webui-port=2017
ExecStop=/usr/bin/killall -w -s 9 /usr/bin/qbittorrent-nox
Restart=on-failure
[Install]
WantedBy=multi-user.target
EOF
################################ qBittorrent 启动脚本 ################################


  mkdir -p /root/.config/qBittorrent
  wget -qO /root/.config/qbittorrent.Userpass.py https://raw.githubusercontent.com/Aniverse/inexistence/master/Config/qbittorrent.Userpass.py
  chmod 755 /root/.config/qbittorrent.Userpass.py
  QBPASS=$(python /root/.config/qbittorrent.Userpass.py ${ANPASS})

  mkdir -p /etc/inexistence/001.Log
  chmod -R 777 /etc/inexistence/001.Log

################################ qBittorrent 配置文件 ################################
  cat >/root/.config/qBittorrent/qBittorrent.conf<<EOF
[Application]
FileLogger\Enabled=true
FileLogger\Age=6
FileLogger\DeleteOld=true
FileLogger\Backup=true
FileLogger\AgeType=1
FileLogger\Path=/etc/inexistence/001.Log
FileLogger\MaxSize=20

[LegalNotice]
Accepted=true

[Preferences]
Bittorrent\AddTrackers=false
Bittorrent\DHT=false
Bittorrent\Encryption=1
Bittorrent\LSD=false
Bittorrent\MaxConnecs=-1
Bittorrent\MaxConnecsPerTorrent=-1
Bittorrent\MaxRatioAction=0
Bittorrent\PeX=false
Bittorrent\uTP=false
Bittorrent\uTP_rate_limited=false
Connection\GlobalDLLimitAlt=0
Connection\GlobalUPLimitAlt=0
Downloads\SavePath=/home/${ANUSER}/qbittorrent/download
Downloads\TorrentExportDir=/home/${ANUSER}/qbittorrent/torrent
General\Locale=zh
WebUI\LocalHostAuth=false
Queueing\QueueingEnabled=false
WebUI\Port=2017
WebUI\Password_ha1=@ByteArray(${QBPASS})
WebUI\Username=${ANUSER}
EOF
################################ qBittorrent 配置文件 ################################

  systemctl daemon-reload
  systemctl enable qbittorrent
  systemctl start qbittorrent
  fi
}




# —————— 编译安装 Deluge —————— 
function _installde() {
  if [ $DEVERSION == "No" ]; then
    cd
  elif [ $DEVERSION == "repo" ]; then
    apt-get install -y deluged deluge-web
  else
    if [ $DELTVERSION == "No" ]; then
      cd
    else
      cd
      apt-get install -y git build-essential checkinstall libboost-system-dev libboost-python-dev libboost-chrono-dev libboost-random-dev libssl-dev git libtool automake autoconf psmisc
      git clone -b ${DELTVERSION} --single-branch https://github.com/arvidn/libtorrent.git
      cd libtorrent
      ./autotool.sh
      ./configure --enable-python-binding --with-libiconv
      make -j${MAXCPUS}
      checkinstall -y
      ldconfig
      cd
    fi
    apt-get install -y python python-twisted python-openssl python-setuptools intltool python-xdg python-chardet geoip-database python-libtorrent python-notify python-pygame python-glade2 librsvg2-common xdg-utils python-mako psmisc
    wget -q http://download.deluge-torrent.org/source/deluge-$DEVERSION.tar.gz 
    tar zxf deluge-$DEVERSION.tar.gz 
    cd deluge-$DEVERSION
    python setup.py build
    python setup.py install --install-layout=deb
    cd
    rm -rf deluge* libtorrent
    echo;echo;echo;echo;echo;echo "  DELUGE-INSTALLATION-COMPLETED  ";echo;echo;echo;echo;echo
  fi
}




# —————— Deluge 启动脚本、配置文件 —————— 
function _setde() {
  if [ $DEVERSION == "No" ]; then
    cd
  else

  mkdir -p /home/${ANUSER}/deluge/download
  mkdir -p /home/${ANUSER}/deluge/torrent
  mkdir -p /home/${ANUSER}/deluge/watch
  mkdir -p /var/www
  ln -s /home/${ANUSER}/deluge/download/ /var/www/deluge.download
  chown -R ${ANUSER}:${ANUSER} /home/${ANUSER}/deluge
  chmod -R 777 /home/${ANUSER}/deluge

################################ deluged 启动脚本 ################################
  cat >/etc/systemd/system/deluged.service<<EOF
[Unit]
Description=Deluge Daemon Service
After=network.target
[Service]
LimitNOFILE=100000
User=root
ExecStart=/usr/bin/deluged -d -l /etc/inexistence/001.Log/deluged.log -L info
ExecStop=/usr/bin/killall -w -s 9 /usr/bin/deluged
Restart=on-failure
TimeoutStopSec=300
[Install]
WantedBy=multi-user.target
EOF

################################ deluge-web 启动脚本 ################################
  cat >/etc/systemd/system/deluge-web.service<<EOF
[Unit]
Description=Deluge Bittorrent Client Web Interface
After=network.target
[Service]
Type=simple
User=root
ExecStart=/usr/bin/deluge-web -l /etc/inexistence/001.Log/delugeweb.log -L info
ExecStop=/usr/bin/killall -w -s 9 /usr/bin/deluge-web
Restart=on-failure
[Install]
WantedBy=multi-user.target
EOF
################################ deluge 启动脚本 ################################

  mkdir -p /etc/inexistence/001.Log
  touch /etc/inexistence/001.Log/deluged.log
  touch /etc/inexistence/001.Log/delugeweb.log
  chmod -R 777 /etc/inexistence/001.Log

  systemctl daemon-reload
  systemctl enable /etc/systemd/system/deluge-web.service
  systemctl enable /etc/systemd/system/deluged.service

  mkdir -p /root/.config
  cd /root/.config
  rm -rf deluge
  wget -q https://raw.githubusercontent.com/Aniverse/inexistence/master/Config/deluge.Userpass.py
  wget -q https://github.com/Aniverse/inexistence/raw/master/Config/deluge.config.tar.gz
  tar zxf deluge.config.tar.gz
  chmod -R 777 /root/.config
  rm -rf deluge.config.tar.gz
  cd

  DWSALT=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
  DWP=$(python /root/.config/deluge.Userpass.py ${ANPASS} ${DWSALT})
  echo "${ANUSER}:${ANPASS}:10" > /root/.config/deluge/auth
  sed -i "s/delugeuser/${ANUSER}/g" /root/.config/deluge/core.conf
  sed -i "s/DWSALT/${DWSALT}/g" /root/.config/deluge/web.conf
  sed -i "s/DWP/${DWP}/g" /root/.config/deluge/web.conf

  systemctl start deluged
  systemctl start deluge-web

  fi
}




# —————— 使用修改版 rtinst 安装 rTorrent，h5ai —————— 
function _installrt() {
  wget https://raw.githubusercontent.com/Aniverse/rtinst/master/rtsetup

  if [ $RTVERSION == "No" ]; then
    cd
  elif [ $RTVERSION == "0.9.4.ipv6.supported" ]; then
    export RTVERSION=0.9.4
    bash rtsetup h5ai-ipv6
  elif [ $RTVERSION == "0.9.4" ]; then
    bash rtsetup h5ai
  else
    bash rtsetup h5ai-ipv6
  fi

  sed -i "s/rtorrentrel=''/rtorrentrel='${RTVERSION}'/g" /usr/local/bin/rtinst
###  sed -i "s/make -j$(nproc)/make -j${MAXCPUS}/g" /usr/local/bin/rtupdate
  rtinst -t -l -y -u ${ANUSER} -p ${ANPASS} -w ${ANPASS}
  rtwebmin

  apt-get install -y sox libsox-fmt-mp3
 
  cd /var/www/rutorrent/plugins
  wget https://github.com/Aniverse/rtinst/raw/master/spectrogram.tar.gz
  tar zxf spectrogram.tar.gz
  rm -rf spectrogram.tar.gz
  chown -R www-data:www-data spectrogram
  
  cd
  echo;echo;echo;echo;echo;echo "  RTORRENT-INSTALLATION-COMPLETED  ";echo;echo;echo;echo;echo
}




# —————— 安装、配置 Transmission —————— 
function _installtr() {
  if [ $TRVERSION == "No" ]; then
    cd
  elif [ $TRVERSION == "repo" ]; then
    apt-get install -y transmission-daemon
  else
    apt-get install -y build-essential automake autoconf libtool pkg-config intltool libcurl4-openssl-dev libglib2.0-dev libevent-dev libminiupnpc-dev libgtk-3-dev libappindicator3-dev ca-certificates libssl-dev pkg-config checkinstall cmake git psmisc
    apt-get install -y openssl
    wget https://github.com/libevent/libevent/archive/release-2.1.8-stable.tar.gz
    tar xvf release-2.1.8-stable.tar.gz
    cd libevent-release-2.1.8-stable
    ./autogen.sh
    ./configure
    make -j${MAXCPUS}
    make install
    cd
    rm -rf libevent-release-2.1.8-stable release-2.1.8-stable.tar.gz
    ln -s /usr/local/lib/libevent-2.1.so.6 /usr/lib/libevent-2.1.so.6

    git clone -b ${TRVERSION} --single-branch https://github.com/transmission/transmission Transmission
    cd Transmission
    git submodule update --init
    sed -i "s/m4_copy/m4_copy_force/g" m4/glib-gettext.m4
    ./autogen.sh
    ./configure
    make -j${MAXCPUS}
    make install
    cd
    rm -rf Transmission

    wget https://github.com/ronggang/transmission-web-control/raw/master/release/tr-control-easy-install.sh
    bash tr-control-easy-install.sh
    rm -rf tr-control-easy-install.sh

    mkdir -p /etc/inexistence/001.Log
    rm -rf /root/.config/transmission/settings.json
    mkdir -p /root/.config/transmission
    wget -O /root/.config/transmission/settings.json https://raw.githubusercontent.com/Aniverse/inexistence/master/Config/transmission.settings.json
    chmod -R 777 /root/.config
    wget -O /etc/systemd/system/transmission.service https://raw.githubusercontent.com/Aniverse/inexistence/master/Config/transmission.service
    chmod 777 /etc/systemd/system/transmission.service
    systemctl daemon-reload
    mkdir -p /home/${ANUSER}/transmission/download
    mkdir -p /home/${ANUSER}/transmission/watch
    mkdir -p /var/www
    ln -s /home/${ANUSER}/transmission/download/ /var/www/transmission.download
    chown -R ${ANUSER}:${ANUSER} /home/${ANUSER}/transmission
    chmod -R 777 /home/${ANUSER}/transmission
    sed -i "s/RPCUSERNAME/${ANUSER}/g" /root/.config/transmission/settings.json
    sed -i "s/RPCPASSWORD/${ANPASS}/g" /root/.config/transmission/settings.json
    systemctl enable transmission
    systemctl start transmission

    echo;echo;echo;echo;echo;echo "  TR-INSTALLATION-COMPLETED  ";echo;echo;echo;echo;echo
    
  fi
}




# —————— 安装 Flexget —————— 
function _installflex() {
  apt-get -y install python-pip
  pip install --upgrade setuptools
  pip install flexget
  pip install transmissionrpc
  pip install --upgrade pip
  cd
  mkdir -p .flexget
  mkdir -p /home/${ANUSER}/qbittorrent/download/
  mkdir -p /home/${ANUSER}/transmission/download/
  mkdir -p /home/${ANUSER}/deluge/download/
  mkdir -p /home/${ANUSER}/deluge/watch
  cd .flexget
  touch config.yml

################################ Flexget 配置文件 ################################

    cat >config.yml<<EOF
templates:
  freespace:
    free_space:
      path: /home/${ANUSER}
      space: 10240
  qb:
    qbittorrent:
      path: /home/${ANUSER}/qbittorrent/download/
      host: localhost
      port: 2017
  tr:
    transmission:
      path: /home/${ANUSER}/transmission/download/
      host: localhost
      port: 9099
  de:
    deluge:
      path: /home/${ANUSER}/deluge/download/
      host: localhost
      port: 58846
      username: ${ANUSER}
      password: ${ANPASS}
  size:
    content_size:
      min: 6000
      max: 666666
      strict: no
tasks:
  HDChina:
    rss: https://hdchina.org/torrentrss.php
    verify_ssl_certificates: no
    if:
      - "'HDChina' in title and '1080p' in title": accept
      - "'HDCTV' in title": accept
    template:
      - freespace
      - size
      - qb
    qbittorrent:
      label: HDChina
  TTG:
    rss: https://totheglory.im/putrss.php
    verify_ssl_certificates: no
    regexp:
      accept:
        - -TTG
        - -WiKi
      reject:
        - DoA
    template:
      - freespace
      - size
      - qb
    qbittorrent:
      label: TTG
  nCore:
    rss: https://ncore.cc/rss/rssdd.xml
    accept_all: yes
    download: /home/${ANUSER}/deluge/watch
web_server:
  port: 6566
  web_ui: yes
schedules: no
EOF

################################ Flexget 启动脚本 ################################

  cat >/etc/systemd/system/flexget.service<<EOF
[Unit]
Description=flexget Daemon
After=network.target

[Service]
User=root
ExecStart=/usr/local/bin/flexget daemon start
Restart=on-failure

[Install]
WantedBy=multi-user.target
EOF

################################ Flexget ################################


  systemctl daemon-reload
  systemctl enable /etc/systemd/system/flexget.service

  cd
  flexget web passwd ${ANPASS}
  systemctl start flexget

  echo;echo;echo;echo;echo;echo "  FLEXGET-INSTALLATION-COMPLETED  ";echo;echo;echo;echo;echo
}




# —————— 安装 rclone —————— 
function _installrclone() {
  cd 
  wget https://downloads.rclone.org/rclone-current-linux-amd64.zip 
  unzip rclone-current-linux-amd64.zip 
  cd rclone-*-linux-amd64 
  cp rclone /usr/bin/ 
  chown root:root /usr/bin/rclone 
  chmod 755 /usr/bin/rclone 
  mkdir -p /usr/local/share/man/man1 
  cp rclone.1 /usr/local/share/man/man1 
  mandb 
  cd 
  rm -rf rclone* 
  echo;echo;echo;echo;echo;echo "  RCLONE-INSTALLATION-COMPLETED  ";echo;echo;echo;echo;echo 
}




# —————— 安装 BBR ——————
function _installbbr() {
  cd 
  wget https://github.com/Aniverse/inexistence/raw/master/script/bbr.sh && chmod +x bbr.sh && ./bbr.sh
  # 下边增加固件是为了解决 Online.net 服务器安装BBR后无法开机的问题
  mkdir -p /lib/firmware/bnx2
  wget -qO /lib/firmware/bnx2/bnx2-mips-06-6.2.3.fw https://github.com/cernekee/linux-firmware/raw/master/bnx2/bnx2-mips-06-6.2.3.fw
  wget -qO /lib/firmware/bnx2/bnx2-mips-09-6.2.1b.fw https://github.com/cernekee/linux-firmware/raw/master/bnx2/bnx2-mips-09-6.2.1b.fw
  rm -rf bbr.sh
  echo;echo;echo;echo;echo;echo "  BBR-INSTALLATION-COMPLETED  ";echo;echo;echo;echo;echo 
}




# 安装 —————— VNC／mkvtoolnix／wine／mktorrent／mktorrent WebUI／ffmpeg／mediainfo —————— 
# 目前还不会投入使用；以后会增加一些选项

function _installtools() {
  cd

########## 安装 ffmpeg ##########
  if [ $relno = 8 ]; then
    grep "deb http://www.deb-multimedia.org jessie main" /etc/apt/sources.list >> /dev/null || echo "deb http://www.deb-multimedia.org jessie main" >> /etc/apt/sources.list
    apt-get -qq update
    apt-get -qq --force-yes install deb-multimedia-keyring
    apt-get -qq update
    apt-get  --force-yes install ffmpeg
  else
    apt-get -y install ffmpeg
  fi

########## 安装 mkvtoolnix ##########
  apt-get install -y apt-transport-https
  wget -q -O - https://mkvtoolnix.download/gpg-pub-moritzbunkus.txt | apt-key add -
  if [ $relno = 8 ]; then
    cat >>/etc/apt/sources.list<<EOF
deb https://mkvtoolnix.download/debian/jessie/ ./
deb-src https://mkvtoolnix.download/debian/jessie/ ./
EOF
  elif [ $relno = 9 ]; then
    cat >>/etc/apt/sources.list<<EOF
deb https://mkvtoolnix.download/debian/stretch/ ./
deb-src https://mkvtoolnix.download/debian/stretch/ ./
EOF
  else
    cat >>/etc/apt/sources.list<<EOF
deb https://mkvtoolnix.download/ubuntu/xenial/ ./
deb-src https://mkvtoolnix.download/ubuntu/xenial/ ./
EOF
  fi
  apt-get update
  apt-get install -y mkvtoolnix mkvtoolnix-gui

########### 安装 mono wine mediainfo vnc4server ##########
  apt-get install -y mono-complete wine mediainfo vnc4server
  apt-get install -y mate-desktop-environment-extras
  mkdir .vnc

################################ VNC 设置文件 ################################

cat >~/.vnc/xstartup<<EOF
#!/bin/sh

# Uncomment the following two lines for normal desktop:
#unset SESSION_MANAGER
unset DBUS_SESSION_BUS_ADDRESS
#. /etc/X11/xinit/xinitrc
#/usr/bin/mate-session

[ -x /etc/vnc/xstartup ] && exec /etc/vnc/xstartup
[ -r $HOME/.Xresources ] && xrdb $HOME/.Xresources
xsetroot -solid grey
vncconfig -iconic &
x-terminal-emulator -geometry 80x24+10+10 -ls -title "$VNCDESKTOP Desktop" &
mate-session &
EOF

###########  apt-get install -y mktorrent  ###########
  wget https://github.com/Rudde/mktorrent/archive/v1.1.tar.gz
  tar zxf v1.1.tar.gz
  cd mktorrent-1.1
  make -j${MAXCPUS}
  make install
  cd ..
  rm -rf mktorrent-1.1 v1.1.tar.gz

  mkdir -p /var/www/mktorrent
  wget -qO /var/www/mktorrent/index.php https://github.com/Aniverse/inexistence/raw/master/Config/mktorrent.php
  chmod 777 /var/www/mktorrent/index.php
  sed -i "s/REPLACEUSERNAME/${ANUSER}/g" /var/www/mktorrent/index.php
  
######################  一些脚本  ######################

  apt-get install -y unzip
  mkdir -p /etc/inexistence/001.Log
  mkdir -p /etc/inexistence/002.Tools/eac3to
  mkdir -p /etc/inexistence/003.Screenshots
  mkdir -p /etc/inexistence/004.BDinfo
  mkdir -p /etc/inexistence/005.Torrents
  mkdir -p /etc/inexistence/006.BluRay
  mkdir -p /etc/inexistence/007.Demux
  mkdir -p /etc/inexistence/008.Output1
  mkdir -p /etc/inexistence/009.Output2
  mkdir -p /etc/inexistence/010.Output3
  mkdir -p /etc/inexistence/011.Output4

  cd /etc/inexistence/002.Tools/eac3to
  wget -q http://madshi.net/eac3to.zip
  unzip -qq eac3to.zip
  rm -rf eac3to.zip

###  wget -qO /etc/inexistence/002.Tools/bdinfo-cli.exe https://github.com/Aniverse/inexistence/raw/master/script//bdinfo-cli.exe
###  wget -qO /usr/local/bin/**** https://github.com/Aniverse/inexistence/raw/master/script/****.sh
###  wget -qO /usr/local/bin/xiansu https://github.com/Aniverse/inexistence/raw/master/script/xiansu.sh
  wget -qO /usr/local/bin/bdinfo https://github.com/Aniverse/inexistence/raw/master/script/bdinfo.sh
  wget -qO /usr/local/bin/bdshuchu https://github.com/Aniverse/inexistence/raw/master/script/bdshuchu.sh
  wget -qO /usr/local/bin/pt https://github.com/Aniverse/inexistence/raw/master/script/pt.sh
  wget -qO /usr/local/bin/jietua https://github.com/Aniverse/inexistence/raw/master/script/jietua.sh
  wget -qO /usr/local/bin/jietub https://github.com/Aniverse/inexistence/raw/master/script/jietub.sh
  wget -qO /usr/local/bin/speedtest https://github.com/Aniverse/inexistence/raw/master/script/speedtest.py
  chmod -R 777 /usr/local/bin

  echo;echo;echo;echo;echo;echo "  UPTOOLBOX-INSTALLATION-COMPLETED  ";echo;echo;echo;echo;echo 
}

tar -czvf eac3to.tar.gz /etc/inexistence/eac3to


# 一些设置修改（有些私货）
function _tweaks() {
if [ $tweaks == "No" ]; then
  echo
else
  rm -rf /etc/localtime
  cp -a /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
  apt-get install -y ntpdate sysstat wondershaper lrzsz mtr iostat
  ntpdate time.windows.com
  hwclock -w
  cat>>/etc/bash.bashrc<<EOF
######### Seedbox Script Mod Start #########
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export LANGUAGE=en_US.UTF-8

alias qba="systemctl start qbittorrent"
alias qbb="systemctl stop qbittorrent"
alias qbc="systemctl status qbittorrent"
alias qbr="systemctl restart qbittorrent"
alias dea="systemctl start deluged"
alias deb="systemctl stop deluged"
alias dec="systemctl status deluged"
alias der="systemctl restart deluged"
alias dewa="systemctl start deluge-web"
alias dewb="systemctl stop deluge-web"
alias dewc="systemctl status deluge-web"
alias dewr="systemctl restart deluge-web"
alias tra="systemctl start transmission"
alias trb="systemctl stop transmission"
alias trc="systemctl status transmission"
alias trr="systemctl restart transmission"
alias rta="sudo -u ${ANUSER} rt start"
alias rtb="sudo -u ${ANUSER} rt stop"
alias rtr="sudo -u ${ANUSER} rt restart"
alias flexa="systemctl start flexget"
alias flexb="systemctl stop flexget"
alias flexc="flexget daemon status"
alias flexr="systemctl restart flexget"
alias cdde="cd /home/${ANUSER}/deluge/download && ls --color -lh"
alias cdqb="cd /home/${ANUSER}/qbittorrent/download && ls --color -lh"
alias cdrt="cd /home/${ANUSER}/rtorrent/download && ls --color -lh"
alias cdtr="cd /home/${ANUSER}/transmission/download && ls --color -lh"
alias shanchu="rm -rf"
alias xiugai="nano /etc/bash.bashrc && source /etc/bash.bashrc"
alias quanxian="chmod -R 777"
alias anzhuang="apt-get install -y"
alias yongyouzhe="chown ${ANUSER}:${ANUSER}"

alias ssa="/etc/init.d/shadowsocks-r start"
alias ssb="/etc/init.d/shadowsocks-r stop"
alias ssc="/etc/init.d/shadowsocks-r status"
alias ssr="/etc/init.d/shadowsocks-r restart"
alias ruisua="/appex/bin/serverSpeeder.sh start"
alias ruisub="/appex/bin/serverSpeeder.sh stop"
alias ruisuc="/appex/bin/serverSpeeder.sh status"
alias ruisur="/appex/bin/serverSpeeder.sh restart"

alias scrl="screen ls"
alias scrgd="screen -U -R GoogleDrive"
alias renwu="ps aux | grep"
alias ${ANUSER}="su ${ANUSER}"
alias flexs="nano /root/.flexget/config.yml"
alias ios="iostat -d -x -k 1"
alias rtc="chmod -R 777 /dev/pts && sudo -u ${ANUSER} screen -r rtorrent"
alias qblog="cat /etc/inexistence/001.Log/qbittorrent.log"
alias cdb="cd .."
alias cesu="speedtest --share"
alias ll="ls --color -lh"

alias eac3to='wine /etc/inexistence/002.Tools/eac3to/eac3to.exe 2>/dev/null'
alias eacout='wine /etc/inexistence/002.Tools/eac3to/eac3to.exe 2>/dev/null | tr -cd "\11\12\15\40-\176"'
######### Seedbox Script Mod END #########
EOF

  cat >>/etc/sysctl.conf<<EOF
fs.file-max = 1926817
fs.nr_open = 1926817
EOF
  
  echo "* - nofile 1926817">>/etc/security/limits.conf
  echo "* - nproc 1926817">>/etc/security/limits.conf
  echo "DefaultLimitNOFILE=123456">>/etc/systemd/system.conf
  echo "DefaultLimitNPROC=123456">>/etc/systemd/system.conf
  echo "precedence ::ffff:0:0/96 100">>/etc/gai.conf

  source /etc/bash.bashrc
  locale
  sysctl -p
fi
}




# 结尾
function _end() {
  echo
  clear
    echo -e " ${zidingyi1}${bold}    Installation Completed    ${normal} "
    export serverip=$(wget -qO- http://v4.ipv6-test.com/api/myip.php) >> /dev/null 2>&1
    echo
    if [ $QBVERSION == "No" ]; then
      cd >> /dev/null 2>&1
    else
      echo -e " ${cyan}qBittorrent WebUI${normal}    http://${serverip}:2017"
    fi

    if [ $DEVERSION == "No" ]; then
      cd >> /dev/null 2>&1
    else
      echo -e " ${cyan}Deluge WebUI${normal}         http://${serverip}:8112"
    fi

    if [ $TRVERSION == "No" ]; then
      cd >> /dev/null 2>&1
    else
      echo -e " ${cyan}Transmission WebUI${normal}   http://${ANUSER}:${ANPASS}@${serverip}:9099"
    fi

    if [ $RTVERSION == "No" ]; then
      cd >> /dev/null 2>&1
    else
      echo -e " ${cyan}RuTorrent${normal}            https://${ANUSER}:${ANPASS}@${serverip}/rutorrent"
      echo -e " ${cyan}h5ai File Indexer${normal}    https://${ANUSER}:${ANPASS}@${serverip}"
      echo -e " ${cyan}webmin${normal}               https://${serverip}/webmin"
      
    fi

    if [ $flexget == "No" ]; then
      cd >> /dev/null 2>&1
    else
      echo -e " ${cyan}Flexget WebUI${normal}        http://${serverip}:6566"
    fi

### echo -e " ${cyan}MkTorrent WebUI${normal}      https://${ANUSER}:${ANPASS}@${serverip}/mktorrent"

    if [ $tweaks == "No" ]; then
      cd >> /dev/null 2>&1
    else
      echo
      echo -e " ${message_title}${bold}Some usage${normal}"
      echo
      echo '###################################################################################################'
      echo "#                                                                                                 #"
      echo -e "#  ${green}qba${normal} = 运行 qBittorrent-nox  ${green}dea${normal} = 运行 Deluged  ${green}dewa${normal} = 运行 Deluge WebUI  ${green}rta${normal} = 运行 rTorrent  #"
      echo -e "#  ${green}qbb${normal} = 关闭 qBittorrent-nox  ${green}deb${normal} = 关闭 Deluged  ${green}dewb${normal} = 关闭 Deluge WebUI  ${green}rtb${normal} = 关闭 rTorrent  #"
      echo -e "#  ${green}qbc${normal} = 检查 qBittorrent-nox  ${green}dec${normal} = 检查 Deluged  ${green}dewc${normal} = 检查 Deluge WebUI  ${green}   ${normal}                  #"
      echo -e "#  ${green}qbr${normal} = 重启 qBittorrent-nox  ${green}der${normal} = 重启 Deluged  ${green}dewr${normal} = 重启 Deluge WebUI  ${green}rtr${normal} = 重启 rTorrent  #"
      echo "#                                                                                                 #"
      echo -e "#  ${green}cdqb${normal}     = 切换目录到 qb 的下载目录并显示内容   ${green}flexa${normal} = 运行 Flexget Daemon                    #"
      echo -e "#  ${green}cdde${normal}     = 切换目录到 de 的下载目录并显示内容   ${green}flexb${normal} = 关闭 Flexget Daemon                    #"
      echo -e "#  ${green}cdrt${normal}     = 切换目录到 rt 的下载目录并显示内容   ${green}flexc${normal} = 检查 Flexget Daemon                    #"
      echo -e "#  ${green}cdtr${normal}     = 切换目录到 tr 的下载目录并显示内容   ${green}flexr${normal} = 重启 Flexget Daemon                    #"
      echo -e "#  ${green}shanchu${normal}  = rm -rf，删除                         ${green} tra ${normal} = 运行 Transmission Daemon               #"
      echo -e "#  ${green}anzhuang${normal} = apt-get install -y，安装             ${green} trb ${normal} = 关闭 Transmission Daemon               #"
      echo -e "#  ${green}quanxian${normal} = chmod -R 777，赋予权限               ${green} trc ${normal} = 检查 Transmission Daemon               #"
      echo -e "#  ${green}xiugai${normal}   = 编辑快捷命令                         ${green} trr ${normal} = 重启 Transmission Daemon               #"
      echo "#                                                                                                 #"
      echo '###################################################################################################'
    fi
    echo
    echo
    echo
    echo '########################################################################'
    echo "#                                                                      #"
    echo "#                                                                      #"
    echo "#                           ${yellow}${bold}El Psy Congroo !${normal}                           #"
    echo "#                                                                      #"
    echo "#                                                                      #"
    echo '########################################################################'
  echo
  echo
}




# 结构
_intro
_checkroot
_warning
echo
echo
_askpass
_askmt
_askqbt
_askdeluge
_askdelt
_askrt
_asktr
_askflex
_askrclone
if [[ -d "/proc/vz" ]]; then
  echo -e "The script has a function of installing BBR"
  echo -e "Since your seedbox is based on ${red}OpenVZ${normal}, and the normal BBR installation isn't supported by OpenVZ"
  echo -e "you should install BBR in another way${normal}"
  bbr=not supported by OpenVZ
else
  _askbbr
fi
_asktweaks
_askcontinue

echo "${bold}${magenta}The selected softwares will be installed, this may take between${normal}"
echo "${bold}${magenta}0 and 90 minutes depending on your systems specs and your selection${normal}"
echo ""

_setuser
apt-get update -y




if [ $bbr == "Yes" ]; then
  echo -n "Configuring BBR ... ";_installbbr
else
  echo "Skip BBR installation";echo;echo;echo;echo;echo
fi


if [ $QBVERSION == "No" ]; then
  echo "Skip qBittorrent installation";echo;echo;echo;echo;echo
else
  echo -n "Installing qBittorrent ... ";_installqbt
  echo -n "Configuring qBittorrent ... ";_setqbt
fi


if [ $DEVERSION == "No" ]; then
  echo "Skip Deluge installation";echo;echo;echo;echo;echo
else
  echo -n "Installing Deluge ... ";_installde
  echo -n "Configuring Deluge ... ";_setde
fi


if [ $RTVERSION == "No" ]; then
  echo "Skip rTorrent installation";echo;echo;echo;echo;echo
else
  echo -n "Installing rTorrent ... ";_installrt
fi


if [ $TRVERSION == "No" ]; then
  echo "Skip Transmission installation";echo;echo;echo;echo;echo
else
  echo -n "Installing Transmission ... ";_installtr
fi


if [ $flexget == "No" ]; then
  echo "Skip Flexget installation";echo;echo;echo;echo;echo
else
  echo -n "Installing Flexget ... ";_installflex
fi


if [ $rclone == "No" ]; then
  echo "Skip rclone installation";echo;echo;echo;echo;echo
else
  echo -n "Installing rclone ... ";_installrclone
fi


if [ $tweaks == "No" ]; then
  echo "Skip System tweaks";echo;echo;echo;echo;echo
else
  echo -n "Configuring system settings ... ";_tweaks
fi


_end
